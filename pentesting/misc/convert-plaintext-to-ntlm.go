package main

import (
	"bufio"
	"fmt"
	"os"
	"strings"

	"golang.org/x/crypto/md4"
)

func ntowfv1(password string) []byte {
	utf16Password := unicodeToUtf16(password)
	hash := md4.New()
	hash.Write(utf16Password)
	return hash.Sum(nil)
}

func unicodeToUtf16(s string) []byte {
	utf16 := make([]uint16, len(s))
	for i, c := range s {
		utf16[i] = uint16(c)
	}
	result := make([]byte, len(utf16)*2)
	for i, c := range utf16 {
		result[i*2] = byte(c)
		result[i*2+1] = byte(c >> 8)
	}
	return result
}

func main() {
	if len(os.Args) != 2 {
		fmt.Println("Usage: go run main.go password_file.txt")
		return
	}

	passwordFilePath := os.Args[1]
	passwordFile, err := os.Open(passwordFilePath)
	if err != nil {
		fmt.Printf("Error opening password file: %v\n", err)
		return
	}
	defer passwordFile.Close()

	scanner := bufio.NewScanner(passwordFile)
	for scanner.Scan() {
		password := strings.TrimSpace(scanner.Text())
		ntlmHash := ntowfv1(password)
		fmt.Printf("%x\n", ntlmHash)
	}

	if err := scanner.Err(); err != nil {
		fmt.Printf("Error reading password file: %v\n", err)
	}
}
